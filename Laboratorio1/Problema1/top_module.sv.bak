module top_module(
    input logic [3:0] switches,  // 4 switches para la entrada binaria
    output logic [6:0] seg,      // 7 segmentos para el display
    output logic [3:0] an        // Control de ánodos para los displays
);
    // Señales internas
    logic [3:0] bcd;
    
    // Instancia del decodificador binario a BCD
    binary_to_bcd decoder(
        .binary_in(switches),
        .bcd_out(bcd)
    );
    
    // Decodificador de 7 segmentos
    seven_segment_decoder decoder_display(
        .bcd_in(bcd),
        .segments(seg)
    );
    
    // Control de los displays (activos en bajo)
    // Asumiendo que an[0] es para el display a usar
    assign an = 4'b1110; // Activa solo el primer display
endmodule

// Módulo decodificador de BCD a 7 segmentos
// Asumiendo display de ánodo común (0 = segmento encendido)
module seven_segment_decoder(
    input logic [3:0] bcd_in,
    output logic [6:0] segments
);
    // segments[6:0] corresponde a gfedcba
    always_comb begin
        case(bcd_in)
            4'b0000: segments = 7'b1000000; // 0
            4'b0001: segments = 7'b1111001; // 1
            4'b0010: segments = 7'b0100100; // 2
            4'b0011: segments = 7'b0110000; // 3
            4'b0100: segments = 7'b0011001; // 4
            4'b0101: segments = 7'b0010010; // 5
            4'b0110: segments = 7'b0000010; // 6
            4'b0111: segments = 7'b1111000; // 7
            4'b1000: segments = 7'b0000000; // 8
            4'b1001: segments = 7'b0010000; // 9
            default: segments = 7'b1111111; // Apagado para valores incorrectos
        endcase
    end
endmodule